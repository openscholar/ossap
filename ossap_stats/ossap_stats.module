<?php

/**
 * @file
 * Statistics for OpenScholar Single Access Point (OSSAP).
 */

/**
 * Defines the settings variable name for the total child sites count block.
 */
define('OSSAP_SITES_BLOCK_SETTINGS', 'ossap_stats_sites_settings');

/**
 * Implements hook_menu().
 */
function ossap_stats_menu() {
  $items = array();

  $items['ossap/stats/%/code'] = array(
    'title' => t('OpenScholar Stats'),
    'page callback' => '_ossap_stats_code',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ossap/stats/%/embed.js'] = array(
    'title' => t('OpenScholar Stats'),
    'page callback' => '_ossap_stats_embed_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ossap_stats_theme() {
  return array(
    'ossap_stats_embed_js' => array(
      'variables' => array('total' => NULL),
      'template' => 'ossap-stats-embed-js',
    ),
  );
}

/**
 * Page callback; formats and displays the embed code to paste on any site.
 */
function _ossap_stats_code($stat) {
  // Formats the div tag whose innerText will be updated.
  $id = "ossap-stats-$stat";
  $div =  '<div id="' . $id . '"></div>';

  // Formats the script tag which will find the value and update the div.
  global $base_url;
  $script_path = "/ossap/stats/$stat/embed.js";
  $src = $base_url . $script_path;
  $script = '<script type="text/javascript" src="' . $src . '"></script>';

  // Appends the div tag and the script tag, prints to the page and exits.
  $code = $div . $script;
  print check_plain($code);
  exit;
}


/**
 * Page callback; formats and displays the embed code to paste on any site.
 */
function _ossap_stats_embed_js($stat) {
  switch ($stat) {
    case 'sites':
      // Fetches the latest total sites variable value.
      $total = variable_get('ossap_stats_total_sites', 0);
      // Inserts commas like "1,000".
      $total = number_format($total);
      dpm($total);
      print theme('ossap_stats_embed_js', array('total' => $total));
      exit;
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function ossap_stats_cron_queue_info() {
  $queue = array();

  $queue['ossap_stats_queue'] = array(
    'worker callback' => 'ossap_stats_block_worker',
  );

  return $queue;
}

/**
 * Implements hook_cron().
 */
function ossap_stats_cron() {
  $queue = DrupalQueue::get('ossap_stats_queue');
  $queue->createQueue();
  $stats = array('sites');
  foreach ($stats as $stat) {
    $queue->createItem($stat);
  }
}

/**
 * Cron worker callback for OSSAP stats.
 */
function ossap_stats_block_worker($stat = '') {
  switch ($stat) {
    case 'sites':
      ossap_stats_sites_cron_worker();
      break;
  }
}

/**
 * Cron queue worker for the ossap_stats_sites block.
 *
 * Invokes drupal_http_request on each child server to get total sites stats.
 */
function ossap_stats_sites_cron_worker() {
  $count = 0;

  $servers = variable_get('ossap_child_domains', array());
  $domains = array_keys($servers);
  $options = array();
  foreach ($domains as $domain) {
    $url = "http://$domain/stats";
    $result = drupal_http_request($url, $options);
    if (isset($result->data)) {
      $data = drupal_json_decode($result->data);
      if (isset($data['websites']['value'])) {
        $count += $data['websites']['value'];
      }
    }
  }

  if ($count) {
    variable_set('ossap_stats_total_sites', $count);
  }
}
